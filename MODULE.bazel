module(
    name = "marvel_explorer",
    version = "1.0",
)

bazel_dep(name = "bazel-diff", version = "9.0.4")
bazel_dep(
    name = "apple_support",
    version = "1.21.1",
    repo_name = "build_bazel_apple_support",
)
bazel_dep(
    name = "rules_xcodeproj",
    version = "3.1.2",
)
bazel_dep(
    name = "rules_swift_package_manager",
    version = "1.5.0",
)

swift_deps = use_extension(
    "@rules_swift_package_manager//:extensions.bzl",
    "swift_deps",
)

bazel_dep(
    name = "rules_cc",
    version = "0.1.2",
)
bazel_dep(
    name = "rules_apple",
    version = "4.1.2",
    repo_name = "build_bazel_rules_apple",
)

single_version_override(
    module_name = "rules_swift",
    version = "3.0.2",
)

bazel_dep(
    name = "rules_swift",
    version = "3.0.2",
    repo_name = "build_bazel_rules_swift",
)

# Swift Syntax for Swift macros support
bazel_dep(name = "swift-syntax", version = "601.0.1.1")

apple_cc_configure = use_extension(
    "@build_bazel_apple_support//crosstool:setup.bzl",
    "apple_cc_configure_extension",
)
use_repo(
    apple_cc_configure,
    "local_config_apple_cc",
    "local_config_apple_cc_toolchains",
)

#register_toolchains("//bazel/tools/jdk:temurin_24_toolchain")

swift_deps.from_package(
    declare_swift_package = True,  # Enable the swift_package repository
    resolved = "//:Package.resolved",
    swift = "//:Package.swift",
)
use_repo(
    swift_deps,
    # "swift_deps_info",  # This is generated by the ruleset.
    "swift_package",  # Repository for running swift package commands
    "swiftpkg_experiment_ios_client",
    # The name of the Swift package repositories will be added to this declaration in step 4 after
    # running `bazel mod tidy`.
    # NOTE: The name of the Bazel external repository for a Swift package is `swiftpkg_xxx` where
    # `xxx` is the Swift package identity, lowercase, with punctuation replaced by `hyphen`. For
    # example, the repository name for apple/swift-nio is `swiftpkg_swift_nio`.
)
